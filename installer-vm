#!/bin/sh

#
# NO COPYRIGHT.
#
# The person who associated a work with this deed has dedicated the work
# to the public domain by waiving all of his or her rights to the work
# worldwide under copyright law, including all related and neighboring
# rights, to the extent allowed by law.
#
# You can copy, modify, distribute and perform the work, even for
# commercial purposes, all without asking permission.
#
# See https://creativecommons.org/publicdomain/zero/1.0/ for additional
# information.
#

###########################################################################
# Only set this when you're happy with all the variables below.
# Running with this set to '1' is a destructive operation.
CONFIGURED=0
###########################################################################

# Names.
USER="me"           # Initial non-root user XXX make, chown
HOST="mybox"        # hostname
DOMAIN="my.domain"  # The remaining bits of FQDN to follow hostname

# General parameters for the install.
SWAPSIZE=4096       # Size of swap in megabytes

# Block device
DA=/dev/vda         # First drive, virtio.
#DA=/dev/sda        # First drive, scsi/sata.

# Distribution-specific variables.
RELEASE="bullseye"
REPOSITORY="http://deb.debian.org/debian"
SETS="main contrib non-free"
SECURITY_REPOSITORY="http://security.debian.org/debian-security"

# Local cache.
CACHE="http://cache.${DOMAIN}:3142"
export http_proxy="${CACHE}";

# GPT labels, 0 is for the first disk, 1 for the second if mirroring
BIOSBOOT0=grub0     # biosboot
BOOT0=boot0         # /boot
ROOT0=root0         # main vg


###########################################################################
###########################################################################
#         Nothing below here should normally need to be modified.         #
###########################################################################
###########################################################################

#
# Last ditch sanity check.
#
if [ ${CONFIGURED} -ne 1 ]; then
    echo "Please carefully examine and set configuration" \
        "variables before proceeding."
    exit 1
fi

#
# Confirm each step before we run it.
#
confirm_step()
{
    STEP=$(expr $STEP + 1)
    echo
    read -p "Run step ${STEP}: $*? (y/N) " RESPONSE
    if [ "X${RESPONSE}" = "X" ]; then
        RESPONSE="N"
    fi
    if [ "${RESPONSE}" = "Y" -o "${RESPONSE}" = "y" ]; then
        return 0
    else
        return 1
    fi
}

#
# Simplistic try/catch handler.
#
newtry()
{
    ERRORS=0
}

try()
{
    "${@}"
    ERRORS=$((${ERRORS} + ${?}))
}

catch()
{
    if [ ${ERRORS} -gt 0 ]; then
        echo "Error: ${1}"
        exit 1
    fi
}

STEP=0

###########################################################################
# If we're invoked as the thing inside the chroot...
# XXX maybe break this into steps as well
if [ "X${1}" = "Xchroot" ]; then
    export TERM=linux

    #
    # Free software is about choice!
    #
    mkdir -p /mnt/etc/apt/preferences.d
    cat <<END > /mnt/etc/apt/preferences.d/no-systemd
Package: systemd
Pin: release *
Pin-Priority: -1

Package: systemd-sysv
Pin: release *
Pin-Priority: -1

Package: libnss-systemd
Pin: release *
Pin-Priority: -1
END

    cat > /etc/apt/apt.conf.d/02proxy <<END
Acquire::http::Proxy "${CACHE}";
END

    apt update

    apt install linux-image-amd64

    apt-cache dumpavail | perl -00 -ne '/^Package: (.*)/m && print "$1\n"
        if (/^Priority: (?:required|important|standard)/m
            and ! /^Package: .*systemd/m)' | xargs apt --yes install

    apt install --yes firmware-linux-nonfree
    apt install --yes curl bsd-mailx locales man
    apt install --yes vim-nox net-tools ifupdown bash-completion patch

    locale-gen en_US.UTF-8
    dpkg-reconfigure locales
    dpkg-reconfigure tzdata

    tasksel --task-packages standard | xargs apt install --yes

    # XXX install from outside - all of this stuff that doesn't require
    # user interaction
    apt install --yes mdadm openssh-server rsync console-setup-linux

    mdadm --detail --scan > /etc/mdadm/mdadm.conf
    ln -s /proc/mounts /etc/mtab
    echo "Setting password for root account:"
    passwd root

    echo "RESUME=none" >> /etc/initramfs-tools/initramfs.conf
    update-initramfs -c -k all

    apt install --yes grub-pc
    grub-install ${DA}

    update-grub

    adduser --add_extra_groups ${USER}
    chown -R ${USER}:${USER} /home/${USER}
    exit
fi


###########################################################################
if confirm_step "install prerequisites"; then
    newtry
    echo > /etc/apt/apt.conf.d/02proxy <<END
Acquire::http::Proxy "${CACHE}";
END

    # Flesh out the install environment repositories - kernel n-1 can
    # be found here sometimes, example being linux-image-5.10.0-15-amd64
    echo "deb ${REPOSITORY} ${RELEASE} ${SETS}" \
        > /etc/apt/sources.list
    echo "deb ${REPOSITORY} ${RELEASE}-updates ${SETS}" \
        >> /etc/apt/sources.list
    if [ -n "${SECURITY_REPOSITORY}" ]; then
        echo "deb ${SECURITY_REPOSITORY} ${RELEASE}-security ${SETS}" \
            >> /etc/apt/sources.list
    fi

    try apt update
    try apt install --yes gdisk debootstrap rsync mdadm parted

    catch "prerequisites install failed"
fi


###########################################################################
if confirm_step "clear disk(s) and create partitions"; then
    sgdisk --zap-all ${DA}
    sgdisk --clear ${DA}
    # BIOSBOOT
    sgdisk -n 1:$(sgdisk -F ${DA}):+128K -t 1:ef02 ${DA}
    # /boot
    sgdisk -n 2:$(sgdisk -F ${DA}):+512M -t 2:8300 ${DA}
    # root
    sgdisk -n 3:$(sgdisk -F ${DA}):0 -t 3:8300 ${DA}

    sgdisk --change-name=2:${BOOT0} --change-name=3:${ROOT0} ${DA}

    pvcreate /dev/disk/by-partlabel/${ROOT0}
    vgcreate rootvg /dev/disk/by-partlabel/${ROOT0}
    lvcreate -L ${SWAPSIZE}m -n swap rootvg
    lvcreate -l 100%FREE -n root rootvg
fi


###########################################################################
if confirm_step "format /boot, swap, and root"; then
    #
    # Format boot partition.
    #
    newtry
    try mkfs.ext4 /dev/disk/by-partlabel/${BOOT0}
    catch "boot format failed"

    #
    # Format swap partition.
    #
    newtry
    try mkswap /dev/rootvg/swap
    catch "swap format failed"

    #
    # Format root partition.
    #
    newtry
    try mkfs.ext4 /dev/rootvg/root
    catch "root format failed"
fi


###########################################################################
if confirm_step "mount datasets into /mnt"; then
    newtry
    try mount /dev/rootvg/root /mnt
    catch mount root failed

    newtry
    try mkdir -p /mnt/boot
    try mount /dev/disk/by-partlabel/${BOOT0} /mnt/boot
    catch mount /boot failed

    mkdir -p /mnt/tmp
    chmod 1777 /mnt/tmp

    mkdir -p /mnt/var/tmp
    chmod 1777 /mnt/var/tmp
fi


###########################################################################
if confirm_step "run debootstrap"; then
    # Free software is about choice!
    mkdir -p /mnt/etc/apt/preferences.d
    cat <<END > /mnt/etc/apt/preferences.d/no-systemd
Package: systemd
Pin: release *
Pin-Priority: -1

Package: systemd:i386
Pin: release *
Pin-Priority: -1

Package: systemd-sysv
Pin: release *
Pin-Priority: -1

Package: libnss-systemd
Pin: release *
Pin-Priority: -1
END

    newtry
    try debootstrap --no-merged-usr --arch=amd64 \
        --include=sysvinit-core,libelogind0,lvm2 --variant=minbase \
        --exclude=systemd,systemd-sysv,libnss-systemd ${RELEASE} /mnt
    catch "debootstrap failed"
fi


###########################################################################
if confirm_step "populate /mnt/etc/fstab"; then
    cat <<END > /mnt/etc/fstab
/dev/rootvg/root / ext4 defaults 0 0
/dev/disk/by-partlabel/boot0 /boot ext4 defaults 0 0
/dev/rootvg/swap none swap sw 0 0
END
fi


###########################################################################
if confirm_step "populate /etc/hostname, /etc/default/locale"; then
    echo ${HOST} > /mnt/etc/hostname
    cat >> /mnt/etc/hosts <<END
    127.0.1.1	${HOST}.${DOMAIN} ${HOST}
END

    # Set a default locale.
    # XXX let the user set this, above
    echo 'LANG="en_US.UTF-8"' > /mnt/etc/default/locale
fi


###########################################################################
if confirm_step "populate apt sources"; then
    echo "deb ${REPOSITORY} ${RELEASE} ${SETS}" \
        > /mnt/etc/apt/sources.list
    echo "deb ${REPOSITORY} ${RELEASE}-updates ${SETS}" \
        >> /mnt/etc/apt/sources.list
    if [ -n "${SECURITY_REPOSITORY}" ]; then
        echo "deb ${SECURITY_REPOSITORY} ${RELEASE}-security ${SETS}" \
            >> /mnt/etc/apt/sources.list
    fi
fi


###########################################################################
if confirm_step "establish bind mounts from /dev, /proc, /sys"; then
    #
    # Bind mounts in preparation for chroot.
    #
    newtry
    try mount --rbind /dev /mnt/dev
    try mount --rbind /proc /mnt/proc
    try mount --rbind /sys /mnt/sys
    catch "bind mount failed"
fi


###########################################################################
if confirm_step "copy installer into chroot and execute"; then
    cp /etc/resolv.conf /mnt/etc/resolv.conf
    cp ${0} /mnt/root/chrooted.sh
    chmod 0755 /mnt/root/chrooted.sh
    chroot /mnt /root/chrooted.sh chroot
    rm /mnt/root/chrooted.sh
fi


###########################################################################
echo
echo "We've gotten to the end! Enjoy!"
